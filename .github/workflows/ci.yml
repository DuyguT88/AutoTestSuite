name: CI Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      # Install dependencies for Cucumber API Tests
      - name: Install dependencies (Cucumber API Tests)
        working-directory: cucumber-api-tests
        run: npm ci
        
      # Run API Tests
      - name: Run Cucumber API Tests
        working-directory: cucumber-api-tests
        run: npm test
        continue-on-error: true  # Optional: continue even if tests fail

      # Install dependencies for Playwright UI Tests
      - name: Install Playwright dependencies
        working-directory: playwright-tests
        run: |
          npm ci
          npx playwright install
    
      # Run Playwright UI Tests
      - name: Run Playwright UI Tests
        working-directory: playwright-tests
        run: npm test
        continue-on-error: true  # Optional: continue even if tests fail

      # Upload UI Test Results
      - name: Upload Playwright Test Results
        uses: actions/upload-artifact@v3  # Updated to v3
        if: always()  # This ensures that the artifacts are uploaded even if the testing step fails
        with:
          name: playwright-test-results
          path: playwright-tests/test-results/**  # Adjust path according to where your test results are stored

      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v3
        if: always()  # Ensures HTML report is uploaded even if tests fail
        with:
           name: playwright-html-report
           path: playwright-tests/ui-tests-html-report/**  # Adjust the path where HTML report is stored

      # Upload API Test Results
      - name: Upload Cucumber Test Results
        uses: actions/upload-artifact@v3  # Updated to v3
        if: always()  # This ensures that the artifacts are uploaded even if the testing step fails
        with:
          name: cucumber-test-results
          path: cucumber-api-tests/test-results/**  # Adjust path according to where your test results are stored

      - name: API Test Summary from JSON Results
        if: always()
        run: |
              echo "### Test API Results Summary" > $GITHUB_STEP_SUMMARY
              jq -r '.[] | "## Feature: " + (.name | tostring) + "\n" + 
                (.elements[] | 
                  "### Scenario: " + (.name | tostring) + "\n" +
                  "| Step | Result |\n" + 
                  (.steps | map(select(.keyword != "Before" and .keyword != "After") | 
                  "| " + (.keyword | tostring) + " " + (.name | tostring) + " | " + (.result.status | tostring) + " |") | join("\n")) + "\n\n")' ./cucumber-api-tests/test-results/api-tests-report.json >> $GITHUB_STEP_SUMMARY
              
              PASS_COUNT=$(jq '[.[] | .elements[] | select(all(.steps[]; .result.status == "passed"))] | length' ./cucumber-api-tests/test-results/api-tests-report.json)
              FAIL_COUNT=$(jq '[.[] | .elements[] | select(any(.steps[]; .result.status == "failed"))] | length' ./cucumber-api-tests/test-results/api-tests-report.json)
              
              echo "API Test Outcome" >> $GITHUB_STEP_SUMMARY
              echo "| Passed | Failed |" >> $GITHUB_STEP_SUMMARY
              echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
              echo "| $PASS_COUNT | $FAIL_COUNT |" >> $GITHUB_STEP_SUMMARY
            
      - name: UI Test Summary from JSON Results
        if: always()
        run: |
             # Define the JSON file path
                  TEST_RESULTS_JSON="./playwright-tests/test-results/JSON/ui-test-json.json"
              
                  # Check if the JSON file exists
                  if [ ! -f "$TEST_RESULTS_JSON" ]; then
                    echo "Test results JSON file not found." >> $GITHUB_STEP_SUMMARY
                    exit 1
                  fi
              
                  # Start the summary
                  echo "### Test API Results Summary" >> $GITHUB_STEP_SUMMARY
              
                  # Parse the JSON to extract features, scenarios, steps, and statuses
                  jq -r '
                  .suites[] |
                  (.suites[] | 
                    "## Feature: " + (.title | tostring) + "\n" +
                    (.specs[] |
                      "### Scenario: " + (.title | tostring) + "\n" +
                      "| Step | Result |\n" +
                      "|------|--------|\n" +
                      (.tests[] |
                        .results[0].steps[]? |
                        "| " + (.title | tostring) + " | " + (.status | tostring) + " |") +
                      "\n")
                  )' $TEST_RESULTS_JSON >> $GITHUB_STEP_SUMMARY
              
                  # Calculate passed and failed counts
                  PASS_COUNT=$(jq '[.suites[].suites[].specs[].tests[] | select(.results[0].status == "passed")] | length' $TEST_RESULTS_JSON)
                  FAIL_COUNT=$(jq '[.suites[].suites[].specs[].tests[] | select(.results[0].status == "failed")] | length' $TEST_RESULTS_JSON)
              
                  # Append overall test outcome
                  echo "### Test Outcome" >> $GITHUB_STEP_SUMMARY
                  echo "| Passed | Failed |" >> $GITHUB_STEP_SUMMARY
                  echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
                  echo "| $PASS_COUNT | $FAIL_COUNT |" >> $GITHUB_STEP_SUMMARY
                     